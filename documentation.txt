# LocalEase API Documentation for Backend Development

This document outlines the API endpoints the frontend application expects. The backend should implement these endpoints to ensure proper application functionality.

---

## 1. Authentication

### 1.1. Send Verification OTP

- **Endpoint:** `/api/send-verification-otp`
- **Method:** `POST`
- **Description:** Sends a One-Time Password (OTP) to the user's email address for verification. The backend should generate a temporary token that binds this request to the subsequent verification step.
- **Query Parameters:**
  - `email`: String (The email address to send the OTP to).
- **Success Response (200 OK):**
  ```json
  {
    "success": true,
    "message": "OTP sent successfully.",
    "token": "temporary.verification.jwt.token" 
  }
  ```
- **Error Response (4xx/5xx):**
  ```json
  {
    "success": false,
    "message": "Failed to send OTP. Email may be invalid or already in use."
  }
  ```
  
### 1.2. Verify OTP

- **Endpoint:** `/api/verify-otp`
- **Method:** `POST`
- **Description:** Verifies the OTP sent to the user's email.
- **Request Body (JSON):**
  ```json
  {
    "otp": "123456",
    "token": "temporary.verification.jwt.token" 
  }
  ```
- **Success Response (200 OK):**
  ```json
  {
    "success": true,
    "message": "Email verified successfully."
  }
  ```
- **Error Response (4xx/5xx):**
  ```json
  {
    "success": false,
    "message": "Invalid or expired OTP."
  }
  ```

### 1.3. User (Customer) Signup

- **Endpoint:** `/api/customer/register`
- **Method:** `POST`
- **Description:** Registers a new user (customer) after their email has been verified.
- **Request Body (JSON):**
  ```json
  {
    "name": "Jane Doe",
    "email": "user@example.com",
    "password": "securepassword123"
  }
  ```
- **Success Response (200 OK):**
  ```json
  {
    "success": true,
    "message": "User registered successfully."
  }
  ```
- **Error Response (4xx/5xx):**
  ```json
  {
    "success": false,
    "message": "Registration failed. Email may already exist."
  }
  ```

### 1.4. User (Customer) Login

- **Endpoint:** `/api/customer/login`
- **Method:** `POST`
- **Description:** Authenticates a user (customer) and returns a session token.
- **Request Body (JSON):**
  ```json
  {
    "email": "user@example.com",
    "password": "securepassword123"
  }
  ```
- **Success Response (200 OK):**
  ```json
  {
    "success": true,
    "message": "Login successful.",
    "token": "jwt.session.token"
  }
  ```
- **Error Response (401 Unauthorized):**
  ```json
  {
    "success": false,
    "message": "Invalid credentials."
  }
  ```

### 1.5. Provider Signup

- **Endpoint:** `/api/auth/signup/provider`
- **Method:** `POST`
- **Description:** Registers a new service provider. This is a multi-part form data request due to file uploads.
- **Request Body (`multipart/form-data`):**
  - `fullName`: String
  - `dob`: Date (ISO 8601 format, e.g., "YYYY-MM-DD")
  - `mobileNumber`: String
  - `email`: String
  - `photograph`: File (image/*)
  - `businessName`: String (optional)
  - `serviceCategory`: String
  - `serviceArea`: String (comma-separated pin codes)
  - `experience`: Number
  - `languages`: String (comma-separated)
  - `fullAddress`: String
  - `state`: String
  - `city`: String
  - `pincode`: String
  - `govtId`: File (image/*, .pdf)
  - `selfie`: String (Base64 data URL)
  - `gstin`: String (optional)
  - `qualification`: File (optional, image/*, .pdf)
  - `policeVerification`: File (optional, image/*, .pdf)
  - `bio`: String
  - `profilePicture`: File (image/*)
  - `availability`: String
- **Success Response (200 OK):**
  ```json
  {
    "success": true,
    "message": "Provider registration submitted for verification."
  }
  ```
- **Error Response (4xx/5xx):**
  ```json
  {
    "success": false,
    "message": "Error processing registration."
  }
  ```

### 1.6. Provider Login

- **Endpoint:** `/api/auth/login/provider`
- **Method:** `POST`
- **Description:** Authenticates a provider.
- **Request Body (JSON):**
  ```json
  {
    "email": "provider@example.com",
    "password": "providerpassword"
  }
  ```
- **Success Response (200 OK):**
  ```json
  {
    "success": true,
    "message": "Login successful.",
    "token": "jwt.session.token"
  }
  ```

### 1.7. Admin Login

- **Endpoint:** `/api/auth/login/admin`
- **Method:** `POST`
- **Description:** Authenticates an admin.
- **Request Body (JSON):**
  ```json
  {
    "email": "admin@example.com",
    "password": "adminpassword"
  }
  ```
- **Success Response (200 OK):**
  ```json
  {
    "success": true,
    "message": "Login successful.",
    "token": "jwt.session.token"
  }
  ```

### 1.8. Forgot Password

- **Endpoint:** `/api/auth/forgot-password`
- **Method:** `POST`
- **Description:** Initiates the password reset process for a user or provider.
- **Request Body (JSON):**
  ```json
  {
    "email": "user@example.com"
  }
  ```
- **Success Response (200 OK):**
  ```json
  {
    "success": true,
    "message": "Password reset link sent successfully."
  }
  ```

---

## 2. Services and Providers

### 2.1. Get All Providers

- **Endpoint:** `/api/providers`
- **Method:** `GET`
- **Description:** Fetches a list of all providers. Supports filtering and sorting via query parameters.
- **Query Parameters:**
  - `category`: String (e.g., "plumbing")
  - `q`: String (for text search on services or provider names)
  - `city`: String (e.g., "Lucknow")
  - `pincode`: String (e.g., "226010")
  - `sortBy`: String ("rating", "reviews", "newest")
  - `availableDate`: Date (ISO 8601 format, e.g., "YYYY-MM-DD")
  - `page`: Number (for pagination, e.g., 1)
  - `limit`: Number (items per page, e.g., 6)
- **Success Response (200 OK):**
  ```json
  {
    "providers": [
      {
        "id": "1",
        "name": "John Doe Plumbing",
        "specialty": "Plumbing",
        "rating": 4.8,
        "reviews": 120,
        "image": "https://example.com/image.png",
        "location": "San Francisco",
        "registeredDate": "2023-01-15"
      }
    ],
    "pagination": {
      "currentPage": 1,
      "totalPages": 5,
      "totalProviders": 28
    }
  }
  ```

### 2.2. Get Provider by ID

- **Endpoint:** `/api/provider/[id]`
- **Method:** `GET`
- **Description:** Fetches detailed information for a single provider.
- **Success Response (200 OK):** The response should match the structure of the `provider` object in `src/app/provider/[id]/page.tsx`.

---

## 3. AI Recommendations (Genkit Flow)

- **Endpoint:** This is handled by a server-side Genkit flow. The backend needs to provide the data source that the flow might query.
- **Flow Name:** `recommendServiceProvidersFlow`
- **Input:**
  ```json
  {
    "searchHistory": "plumbers near me, emergency electrician",
    "preferences": "I need a pet-friendly cleaner."
  }
  ```
- **Output:**
  ```json
  {
    "recommendations": "Based on your history, you might like: \n- ProCleaners (pet-friendly)\n- Bolt Electricians (24/7 service)"
  }
  ```
- **Note:** The backend might need to provide a service or database for the flow to access provider information to make relevant recommendations.

---

## 4. Bookings

### 4.1. Create a Booking

- **Endpoint:** `/api/bookings`
- **Method:** `POST`
- **Description:** Creates a new appointment booking. Requires user authentication.
- **Request Body (JSON):**
  ```json
  {
    "providerId": "1",
    "service": "Faucet Repair",
    "date": "2024-08-16",
    "time": "02:00 PM"
  }
  ```
- **Success Response (201 Created):**
  ```json
  {
    "success": true,
    "message": "Booking created successfully.",
    "booking": {
      "id": "booking-456",
      "service": "Faucet Repair",
      "date": "2024-08-16",
      "time": "02:00 PM",
      "status": "Upcoming"
    }
  }
  ```

---

## 5. Admin Panel

### 5.1. Get Provider Registration Requests

- **Endpoint:** `/api/admin/provider-requests`
- **Method:** `GET`
- **Description:** Fetches all pending, approved, and rejected provider registration requests. Requires admin authentication.
- **Success Response (200 OK):**
  ```json
  {
    "requests": [
      {
        "id": "prov-1",
        "name": "Alice Johnson",
        "businessName": "Sparkle Cleaners",
        "category": "Cleaning",
        "status": "Pending"
      }
    ]
  }
  ```

### 5.2. Get Single Provider Request

- **Endpoint:** `/api/admin/provider-request/[id]`
- **Method:** `GET`
- **Description:** Fetches the full details for a single registration request.
- **Success Response (200 OK):** The response should match the structure of `mockProviderRequest` in `src/app/admin/provider-request/[id]/page.tsx`.

### 5.3. Update Provider Request Status

- **Endpoint:** `/api/admin/provider-request/[id]`
- **Method:** `PUT` or `PATCH`
- **Description:** Approves or rejects a provider registration request.
- **Request Body (JSON):**
  ```json
  {
    "status": "Approved" // or "Rejected"
  }
  ```
- **Success Response (200 OK):**
  ```json
  {
    "success": true,
    "message": "Provider status updated successfully."
  }
  ```
